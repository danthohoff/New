# pip install folium pandas geopandas requests

import os, io, json, requests, pandas as pd, folium
from folium.plugins import MarkerCluster

# -------------------------------------------------
# Eingaben/Dateien
BS_CSV = "betriebsstellen_mit_bundesland.csv"   # aus deinem Zuordnungsskript
BUND_URL = "https://raw.githubusercontent.com/isellsoap/deutschlandGeoJSON/master/2_bundeslaender/3_mittel.geojson"
OUT_HTML = "betriebsstellen_karte.html"
# -------------------------------------------------

# 1) Daten laden
bs = pd.read_csv(BS_CSV)
bs = bs.dropna(subset=["lat","lon"]).copy()

# Fallback-Zentrum
center = [bs["lat"].mean(), bs["lon"].mean()] if len(bs) else [51.163, 10.447]  # Germany centroid

# 2) Bundesländer-GeoJSON holen (einmalig aus GitHub)
try:
    # Viele Folium-Versionen laden GeoJSON direkt aus Python-Objekt stabiler als per URL
    r = requests.get(BUND_URL, timeout=30)
    r.raise_for_status()
    laender_geojson = r.json()
except Exception:
    # Fallback: aus Bytes lesen, dann json.loads
    r = requests.get(BUND_URL, timeout=30)
    r.raise_for_status()
    laender_geojson = json.loads(r.content.decode("utf-8"))

# 3) Karte erstellen
m = folium.Map(location=center, zoom_start=6, tiles="cartodbpositron", control_scale=True)

# 4) Ländergrenzen-Overlay
def style_fn(_feat):
    return {
        "fillOpacity": 0.05,     # leicht transparent, Fokus bleibt auf Punkten
        "weight": 1.0,           # Linienbreite
        "color": "#555555",      # Randfarbe
    }

def highlight_fn(_feat):
    return {"weight": 2.0, "color": "#000000", "fillOpacity": 0.1}

folium.GeoJson(
    laender_geojson,
    name="Bundesländer",
    style_function=style_fn,
    highlight_function=highlight_fn,
    tooltip=folium.GeoJsonTooltip(fields=["GEN"] if "GEN" in laender_geojson["features"][0]["properties"] else None,
                                  aliases=["Bundesland:"], sticky=False),
).add_to(m)

# 5) MarkerCluster der Betriebsstellen
cluster = MarkerCluster(name="Betriebsstellen").add_to(m)

# Kleine Farbpalette nach Bundesland (deterministisch)
palette = [
    "#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd",
    "#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf",
    "#393b79","#637939","#8c6d31","#843c39","#7b4173","#3182bd"
]
bundeslaender = sorted(bs["bundesland"].dropna().unique())
color_map = {bl: palette[i % len(palette)] for i, bl in enumerate(bundeslaender)}

for _, row in bs.iterrows():
    bl = row.get("bundesland") if pd.notna(row.get("bundesland")) else "unbekannt"
    color = color_map.get(bl, "#444444")
    popup = folium.Popup(
        html=f"<b>{row['betriebsstelle']}</b><br/>Bundesland: {bl}<br/>({row['lat']:.6f}, {row['lon']:.6f})",
        max_width=300
    )
    folium.CircleMarker(
        location=[row["lat"], row["lon"]],
        radius=4,
        weight=1,
        color="#222222",
        fill=True,
        fill_opacity=0.9,
        fill_color=color,
        tooltip=f"{row['betriebsstelle']} – {bl}",
        popup=popup
    ).add_to(cluster)

# 6) Steuerung & speichern
folium.LayerControl(collapsed=False).add_to(m)
m.fit_bounds(m.get_bounds())  # auf alle Daten zoomen
m.save(OUT_HTML)
print(f"✔ Karte gespeichert: {OUT_HTML}")