def lu_hln_flaeche_per_day(df_ev: pl.DataFrame, trans_net: pl.DataFrame) -> pl.DataFrame:
    """
    df_ev: ZLM-Events (braucht 'uc' Spalte)
    trans_net: von label_transitions_with_net()
    Ergebnis: pro Tag Spalten 'LU HLN', 'LU Fläche', 'LU alle'
    """
    # alle LU-Ereignisse (Zeit & Zug)
    df_lu = (
        df_ev.filter(pl.col("uc").is_not_null())
             .select(["Betriebstag","zn","istzeit_dt","uc"])
             .sort(["Betriebstag","zn","istzeit_dt"])
    )
    if df_lu.is_empty():
        return (df_ev.select("Betriebstag").unique().sort("Betriebstag")
                    .with_columns([pl.lit(0).alias("LU HLN"), pl.lit(0).alias("LU Fläche"), pl.lit(0).alias("LU alle")]))

    # asof: nächstes Kanten-Ende >= LU-Zeit je (Tag, Zug)
    trans_sorted = trans_net.sort(["Betriebstag","zn","istzeit_dt"])
    lu_mapped = (
        df_lu.join_asof(trans_sorted,
                        left_on="istzeit_dt", right_on="istzeit_dt",
                        by=["Betriebstag","zn"], strategy="forward")
             # nur wenn LU-Zeit im Intervall (prev_t, istzeit_dt] liegt
             .filter(pl.col("prev_t").is_not_null() & (pl.col("istzeit_dt") > pl.col("prev_t")))
             .select(["Betriebstag","zn","istzeit_dt","uc","netz"])
    )

    # Tages-Pivot HLN vs Fläche
    per_day = (
        lu_mapped.group_by(["Betriebstag","netz"]).agg(pl.len().alias("n"))
                 .pivot(values="n", index="Betriebstag", columns="netz")
    )
    for col, name in [("HLN","LU HLN"), ("Flaeche","LU Fläche")]:
        if col not in per_day.columns:
            per_day = per_day.with_columns(pl.lit(0).alias(col))
        per_day = per_day.rename({col: name})

    per_day = per_day.with_columns((pl.col("LU HLN") + pl.col("LU Fläche")).alias("LU alle")) \
                     .sort("Betriebstag")
    return per_day