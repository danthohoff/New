# =====================================================
# 1) Setup
# =====================================================
import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt

# CSV einlesen (per_day.csv = Tagesmetriken aus deiner Pipeline)
df = pd.read_csv("per_day.csv", parse_dates=["Betriebstag"])

# Kurzer Blick auf die Daten
print(df.head())

# =====================================================
# 2) Variablen vorbereiten
# =====================================================

# Skalierte LU (pro Zug)
df["LU_HLN_perZug"] = df["LU HLN"] / df["Züge alle"]
df["LU_Flaeche_perZug"] = df["LU Fläche"] / df["Züge alle"]
df["LU_alle_perZug"] = df["LU alle"] / df["Züge alle"]

# Zielvariable = Pünktlichkeitsquote
y = df["PÜ alle"]

# Debug-Ausgabe
print(df[["Betriebstag","PÜ alle","LU_HLN_perZug","LU_Flaeche_perZug"]].head())

# =====================================================
# 3) Einfache Regression (App-Faktor Gesamt)
# =====================================================

X = sm.add_constant(df[["LU_alle_perZug"]])  # Intercept + Regressor
model_simple = sm.OLS(y, X, missing="drop").fit()
print(model_simple.summary())

# Quick-Plot
plt.scatter(df["LU_alle_perZug"], y, alpha=0.5)
plt.xlabel("LU pro Zug (alle)")
plt.ylabel("PÜ-Quote")
plt.title("Regression: PÜ vs. LU alle/Zug")
plt.plot(df["LU_alle_perZug"], model_simple.predict(X), color="red")
plt.show()


# =====================================================
# 4) Multivariate Regression (HLN vs. Fläche)
# =====================================================

X = sm.add_constant(df[["LU_HLN_perZug", "LU_Flaeche_perZug"]])
model_multi = sm.OLS(y, X, missing="drop").fit()
print(model_multi.summary())


# =====================================================
# 5) Gewichtete Regression (optional)
#    - Gewichtung nach Zugzahl, damit Tage mit wenig Zügen
#      nicht überproportional wirken
# =====================================================

weights = df["Züge alle"]

X = sm.add_constant(df[["LU_HLN_perZug", "LU_Flaeche_perZug"]])
model_wls = sm.WLS(y, X, weights=weights, missing="drop").fit()
print(model_wls.summary())