import polars as pl
from math import radians, sin, cos, sqrt, atan2

# --- CSV einlesen ---
edges_net = pl.read_csv("edges_netz.csv", separator=";", encoding="utf8")

# --- Spaltennamen vereinheitlichen ---
edges_net = edges_net.rename({
    "Strecke": "strecke",
    "von_bst": "von_bst",
    "bis_bst": "bis_bst",
    "von_latlon": "von_latlon",
    "bis_latlon": "bis_latlon"
})

# --- Koordinaten-Paare in numerische Spalten umwandeln ---
edges_net = (
    edges_net.with_columns([
        pl.col("von_latlon").str.strip_chars("()").str.split(", ").alias("von_split"),
        pl.col("bis_latlon").str.strip_chars("()").str.split(", ").alias("bis_split"),
    ])
    .with_columns([
        pl.col("von_split").list.get(0).cast(pl.Float64).alias("von_lon"),
        pl.col("von_split").list.get(1).cast(pl.Float64).alias("von_lat"),
        pl.col("bis_split").list.get(0).cast(pl.Float64).alias("bis_lon"),
        pl.col("bis_split").list.get(1).cast(pl.Float64).alias("bis_lat"),
    ])
    .drop(["von_split","bis_split"])
)



import polars as pl
import folium

def analyze_nrw_overlap(df_zlm: pl.DataFrame, edges_net: pl.DataFrame, nrw_bsts: list[str]):
    """
    Analysiert die Überlappung von Zügen mit NRW-Bezug und anderen Zügen.
    Gibt:
      - edges_full: alle Kanten mit Nutzungsstatistik
      - summary: aggregierte km-Auswertung
      - folium_map: interaktive Karte
    zurück.
    """
    # --- 1️⃣ NRW-Züge identifizieren ---
    zuege_nrw = (
        df_zlm.filter(pl.col("bst").is_in(nrw_bsts))
              .select("zn")
              .unique()
              .to_series()
              .to_list()
    )

    # --- 2️⃣ Züge markieren ---
    df_zlm = df_zlm.with_columns(
        pl.when(pl.col("zn").is_in(zuege_nrw))
          .then(pl.lit("NRW"))
          .otherwise(pl.lit("Nicht-NRW"))
          .alias("zug_typ")
    )

    # --- 3️⃣ Kanten (Edges) aufbauen ---
    edges_used = (
        df_zlm.sort(["zn","istzeit_dt"])
              .with_columns(pl.col("bst").shift(1).over("zn").alias("prev_bst"))
              .filter(pl.col("prev_bst").is_not_null())
              .select(["zn","zug_typ","prev_bst","bst"])
    )

    # --- 4️⃣ Nutzung je Kante und Typ zählen ---
    edge_stats = (
        edges_used.group_by(["prev_bst","bst","zug_typ"])
                  .agg(pl.len().alias("fahrten"))
    )

    # --- 5️⃣ Zusammenführen je Kante ---
    edge_counts = (
        edge_stats.group_by(["prev_bst","bst"])
                  .agg([
                      pl.sum(
                          pl.when(pl.col("zug_typ")=="NRW")
                            .then(pl.col("fahrten")).otherwise(0)
                      ).alias("fahrten_nrw"),
                      pl.sum(
                          pl.when(pl.col("zug_typ")=="Nicht-NRW")
                            .then(pl.col("fahrten")).otherwise(0)
                      ).alias("fahrten_non"),
                  ])
                  .with_columns(
                      pl.when((pl.col("fahrten_nrw")>0) & (pl.col("fahrten_non")>0))
                        .then(pl.lit("Overlap"))
                        .when(pl.col("fahrten_nrw")>0)
                        .then(pl.lit("NRW-nur"))
                        .when(pl.col("fahrten_non")>0)
                        .then(pl.lit("Nicht-NRW-nur"))
                        .otherwise(pl.lit("Unbenutzt"))
                        .alias("Kategorie")
                  )
    )

    # --- 6️⃣ Mit Streckennetz verbinden ---
    edges_full = (
        edge_counts.join(
            edges_net,
            left_on=["prev_bst","bst"],
            right_on=["von_bst","bis_bst"],
            how="left"
        )
        .with_columns([
            (pl.col("fahrten_nrw").fill_null(0) * pl.col("km").fill_null(0)).alias("zugkm_nrw"),
            (pl.col("fahrten_non").fill_null(0) * pl.col("km").fill_null(0)).alias("zugkm_non"),
        ])
    )

    # --- 7️⃣ Summarische Statistik ---
    summary = (
        edges_full.group_by("Kategorie")
                  .agg([
                      pl.sum("zugkm_nrw").alias("Zugkm NRW"),
                      pl.sum("zugkm_non").alias("Zugkm Nicht-NRW"),
                      pl.sum("km").alias("Streckenkilometer"),
                      pl.len().alias("Kantenanzahl")
                  ])
                  .sort("Kategorie")
    )

    # --- 8️⃣ Karte ---
    m = folium.Map(location=[51.4, 7.4], zoom_start=7, tiles="CartoDB positron")

    color_map = {
        "NRW-nur": "blue",
        "Nicht-NRW-nur": "orange",
        "Overlap": "purple",
        "Unbenutzt": "gray",
    }

    for row in edges_full.iter_rows(named=True):
        try:
            if row.get("von_latlon") and row.get("bis_latlon"):
                # Koordinaten-Tupel (lon, lat) -> (lat, lon)
                coords = [eval(row["von_latlon"]), eval(row["bis_latlon"])]
                folium.PolyLine(
                    locations=[coords[0][::-1], coords[1][::-1]],
                    color=color_map.get(row["Kategorie"], "gray"),
                    weight=3,
                    opacity=0.7,
                    tooltip=f"{row['Kategorie']} ({row['km']:.1f} km)"
                ).add_to(m)
        except Exception:
            continue

    return edges_full, summary, m



# Beispielaufruf
edges_full, summary, folium_map = analyze_nrw_overlap(df_zlm, edges_net, nrw_bsts)

print(summary)

# Karte speichern
folium_map.save("zugnetz_nrw_overlap.html")
print("✅ Karte gespeichert als zugnetz_nrw_overlap.html")