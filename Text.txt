def plot_hist_with_punct_boxplots_pretty_v2(
    per_train: pl.DataFrame,
    *,
    bin_size_sec: int = 30,
    max_delay_min: int = 30,
    min_points_for_box: int = 30,
    show_zero_center: bool = True,
    tick_every_min: int = 5,
    figsize=(12,6)
):
    import numpy as np
    import matplotlib.pyplot as plt

    max_delay_sec = max_delay_min * 60
    df = per_train.filter(pl.col("vsp_start").abs() <= max_delay_sec)

    # Bin edges
    edges = np.arange(-max_delay_sec, max_delay_sec + bin_size_sec, bin_size_sec)
    centers = (edges[:-1] + edges[1:]) / 2.0

    # Histogramm (Zugzahlen)
    vsp = df["vsp_start"].to_numpy()
    counts, _ = np.histogram(vsp, bins=edges)

    # Pünktlichkeitswerte je Bin
    df_np = df.select(["vsp_start", "punct_rate"]).to_numpy()
    punct_lists = [[] for _ in range(len(edges)-1)]
    for vsp_i, pr_i in df_np:
        if pr_i is None or np.isnan(pr_i):
            continue
        idx = int((vsp_i - edges[0]) // bin_size_sec)
        if 0 <= idx < len(punct_lists):
            punct_lists[idx].append(float(pr_i) * 100.0)
    box_data = [np.array(x) if len(x) >= min_points_for_box else np.array([])
                for x in punct_lists]

    # --- Plot ---
    fig, ax1 = plt.subplots(figsize=figsize)

    # Histogramm
    ax1.bar(
        edges[:-1] / 60,   # x-Achse jetzt in Minuten
        counts,
        width=bin_size_sec / 60,
        align="edge",
        alpha=0.4,
        color="#77b0ff",
        edgecolor="white",
        label="Züge je Startdelay-Bin"
    )
    ax1.set_ylabel("Anzahl Züge je Bin")
    ax1.grid(alpha=0.25)

    # Boxplots (rechte Achse)
    ax2 = ax1.twinx()
    positions = centers / 60.0  # Minuten
    positions_nonempty = [p for p, arr in zip(positions, box_data) if arr.size > 0]
    box_data_nonempty  = [arr for arr in box_data if arr.size > 0]

    if len(box_data_nonempty) > 0:
        bp = ax2.boxplot(
            box_data_nonempty,
            positions=positions_nonempty,
            widths=(bin_size_sec / 60) * 0.8,
            patch_artist=True,
            showfliers=False,
            boxprops=dict(facecolor="#0047AB", alpha=0.15, linewidth=0),
            medianprops=dict(color="#003366", linewidth=1.2),
            whiskerprops=dict(color="#0047AB", linewidth=0.8, alpha=0.5),
            capprops=dict(color="#0047AB", linewidth=0.8, alpha=0.5)
        )
        ax2.set_ylim(0, 100)
        ax2.set_ylabel("Pünktlichkeitsquote [%]")

    # --- X-Achse formatieren ---
    ax1.set_xlabel("Startverspätung (Minuten)")
    ticks = np.arange(-max_delay_min, max_delay_min + 1, tick_every_min)
    ax1.set_xticks(ticks)
    ax1.set_xticklabels([f"{int(t)}" for t in ticks])
    if show_zero_center:
        ax1.axvline(0, color="black", lw=1, alpha=0.6)

    plt.title("Startverspätung: Histogramm (Zahl Züge) + Boxplots der Pünktlichkeitsquote je Bin")
    plt.tight_layout()
    plt.show()