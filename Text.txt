ev = (
    df_zlm
    .select(["Betriebstag", "zn", "bst", "istzeit_dt"])
    .with_columns([
        pl.col("bst").is_in(nrw_bsts).alias("in_nrw"),
    ])
    .sort(["Betriebstag", "zn", "istzeit_dt"])
)

# Schritt 2: jetzt über "in_nrw" Aggregationen bilden
ev = ev.with_columns([
    pl.col("in_nrw").cum_max().over(["Betriebstag","zn"]).shift(1).fill_null(False).alias("past_in_nrw"),
    pl.col("in_nrw").reverse().cum_max().reverse().over(["Betriebstag","zn"]).shift(-1).fill_null(False).alias("future_in_nrw"),
])

# Schritt 3: is_nrw_train separat anhängen
ev = ev.with_columns([
    pl.col("in_nrw").any().over(["Betriebstag","zn"]).alias("is_nrw_train"),
    pl.when(pl.col("in_nrw").any().over(["Betriebstag","zn"]))
      .then(pl.lit("NRW"))
      .otherwise(pl.lit("Nicht-NRW"))
      .alias("train_type"),
    pl.col("istzeit_dt").dt.truncate(f"{bin_minutes}m").alias("t_bin"),
])