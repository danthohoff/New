import polars as pl

# UC-Kategorisierung
def uc_category_expr(col: str = "uc") -> pl.Expr:
    return (
        pl.when(pl.col(col).is_in([31,32,28,21,22,23,24,25,26,27,29,30,18,12,13,14,47,48,49]))
          .then(pl.lit("EIU"))
        .when(pl.col(col).is_in([62,63,64,69,58,68,51,52,53,54,57,61,59,60]))
          .then(pl.lit("EVU"))
        .when(pl.col(col).is_in([91,92,93,94,95]))
          .then(pl.lit("Sekundär"))
        .otherwise(pl.lit("Weitere"))
    )

def metrics_per_day_with_net(zlm: pl.DataFrame, seg_edges: pl.DataFrame) -> pl.DataFrame:
    """
    Berechnet Tagesmetriken nach HLN/Flaeche:
    - LU gesamt + UC-Kategorien
    - Halte + pünktliche Halte
    """

    # 1) chronologisch sortieren, prev_bst und next_bst je Zuglauf
    zlm = (
        zlm.sort(["Betriebstag", "zn", "istzeit_dt"])
           .with_columns([
               pl.col("bst").shift(1).over(["Betriebstag","zn"]).alias("prev_bst"),
               pl.col("bst").shift(-1).over(["Betriebstag","zn"]).alias("next_bst"),
           ])
    )

    # 2) Transitionen bilden (prev_bst -> bst)
    transitions = (
        zlm.filter(pl.col("prev_bst").is_not_null())
           .select(["Betriebstag","zn","prev_bst","bst"])
           .join(seg_edges, left_on=["prev_bst","bst"], right_on=["u","v"], how="left")
           .with_columns(pl.col("netz").alias("netz_raw"))
    )

    # 3) Forwardfill Netztyp innerhalb jedes Zuglaufs
    transitions = (
        transitions
        .group_by(["Betriebstag","zn"])
        .map_groups(
            lambda df: df.with_columns(
                df["netz_raw"].fill_null(strategy="forward")
                              .fill_null(strategy="backward")
                              .alias("netz_final")
            )
        )
    )

    # 4) LU-Events extrahieren und Netztyp zuordnen
    lu_rows = zlm.filter(pl.col("uc").is_not_null())
    lu_labeled = (
        lu_rows
        .join(transitions.select(["Betriebstag","zn","bst","netz_final"]),
              on=["Betriebstag","zn","bst"],
              how="left")
        .with_columns([
            uc_category_expr("uc").alias("UC_Kat"),
            pl.col("netz_final").fill_null("Flaeche")  # Fallback
        ])
    )

    lu_per_day = (
        lu_labeled
        .group_by(["Betriebstag","netz_final","UC_Kat"])
        .agg(pl.count().alias("LU"))
        .pivot(values="LU", index=["Betriebstag","netz_final"], columns="UC_Kat")
        .fill_null(0)
    )

    # 5) Halte + pünktliche Halte mit Netztyp
    halte = (
        zlm.filter(pl.col("fsStatus").is_in([1,3]))
           .join(transitions.select(["Betriebstag","zn","bst","netz_final"]),
                 on=["Betriebstag","zn","bst"], how="left")
           .with_columns([
               (pl.col("vsp") < 360).alias("puenktlich"),
               pl.col("netz_final").fill_null("Flaeche")
           ])
    )

    halte_per_day = (
        halte.group_by(["Betriebstag","netz_final"])
             .agg([
                 pl.count().alias("Halte"),
                 pl.col("puenktlich").sum().alias("pü Halte")
             ])
    )

    # 6) Zusammenführen
    result = (
        halte_per_day
        .join(lu_per_day, on=["Betriebstag","netz_final"], how="outer")
        .fill_null(0)
        .sort(["Betriebstag","netz_final"])
    )

    return result