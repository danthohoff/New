def lu_hln_flaeche_per_day(df_ev: pl.DataFrame, trans_net: pl.DataFrame) -> pl.DataFrame:
    df_lu = (
        df_ev.filter(pl.col("uc").is_not_null())
             .select(["Betriebstag","zn","istzeit_dt","uc"])
             .sort(["Betriebstag","zn","istzeit_dt"])
    )
    if df_lu.is_empty():
        return (df_ev.select("Betriebstag").unique().sort("Betriebstag")
                .with_columns([pl.lit(0).alias("LU HLN"),
                               pl.lit(0).alias("LU Fläche"),
                               pl.lit(0).alias("LU Unbekannt"),
                               pl.lit(0).alias("LU alle")]))

    trans_sorted = (
        trans_net.rename({"istzeit_dt":"end_t"})
                 .sort(["Betriebstag","zn","end_t"])
    )

    # backward: letzte Transition mit end_t <= LU_time
    lu_bw = df_lu.join_asof(
        trans_sorted, left_on="istzeit_dt", right_on="end_t",
        by=["Betriebstag","zn"], strategy="backward", suffix="_bw"
    )
    ok_bw = (pl.col("prev_t").is_not_null()) & (pl.col("istzeit_dt") >= pl.col("prev_t"))

    # forward: erste Transition mit end_t >= LU_time (für LU vor erster Transition)
    lu_fw = df_lu.join_asof(
        trans_sorted, left_on="istzeit_dt", right_on="end_t",
        by=["Betriebstag","zn"], strategy="forward", suffix="_fw"
    )
    ok_fw = (pl.col("prev_t_fw").is_not_null()) & (pl.col("istzeit_dt") < pl.col("prev_t_fw"))

    # HLN/Fläche koaleszieren: backward bevorzugen, sonst forward
    lu_mapped = (
        lu_bw.join(lu_fw.select(["Betriebstag","zn","istzeit_dt","prev_t_fw","netz"]), 
                   on=["Betriebstag","zn","istzeit_dt"], how="left")
             .with_columns([
                 pl.when(ok_bw).then(pl.col("netz_bw"))
                   .when(ok_fw).then(pl.col("netz"))
                   .otherwise(pl.lit("Unbekannt")).alias("netz_final")
             ])
             .select(["Betriebstag","zn","istzeit_dt","netz_final"])
    )

    per_day = (
        lu_mapped
        .group_by(["Betriebstag","netz_final"])
        .agg(pl.len().alias("n"))
        .pivot(values="n", index="Betriebstag", columns="netz_final")
    )

    # fehlende Spalten sicherstellen + umbenennen
    for k in ["HLN","Flaeche","Unbekannt"]:
        if k not in per_day.columns:
            per_day = per_day.with_columns(pl.lit(0).alias(k))

    return (
        per_day.rename({"HLN":"LU HLN","Flaeche":"LU Fläche","Unbekannt":"LU Unbekannt"})
               .with_columns((pl.col("LU HLN")+pl.col("LU Fläche")+pl.col("LU Unbekannt")).alias("LU alle"))
               .sort("Betriebstag")
    )