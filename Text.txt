import geopandas as gpd
import pandas as pd
from shapely.geometry import Point

def clip_bst_to_layer(bst: pd.DataFrame, poly_wgs84: gpd.GeoDataFrame) -> pd.DataFrame:
    """ Intersects in WGS84; Nearest-Fallback korrekt in EPSG:25832 """
    # Punkte in WGS84
    points = gpd.GeoDataFrame(
        bst.copy(),
        geometry=[Point(xy) for xy in zip(bst["lon"], bst["lat"])],
        crs="EPSG:4326"
    )

    # 1) Standard-Join
    joined = gpd.sjoin(
        points,
        poly_wgs84[["label", poly_wgs84.geometry.name]],
        how="left",
        predicate="intersects"
    ).rename(columns={"label": "gebiet"})

    # 2) Fallback: nächstgelegene Fläche für Punkte ohne Treffer
    missing = joined["gebiet"].isna()
    if missing.any():
        pts_proj = points.to_crs(epsg=25832)
        poly_proj = poly_wgs84.to_crs(epsg=25832)

        nearest = gpd.sjoin_nearest(
            pts_proj.loc[missing, ["geometry"]],
            poly_proj[["label", poly_proj.geometry.name]],
            how="left",
            distance_col="dist_m"
        )

        # jetzt sauber zurückschreiben
        for idx, row in nearest.iterrows():
            joined.at[idx, "gebiet"] = row["label"]

    out = pd.DataFrame(joined.drop(columns=["geometry"]))
    return out[["betriebsstelle", "lat", "lon", "gebiet"]]


netz = gpd.read_file("netzstruktur.geojson")
if netz.crs is None:
    netz.set_crs(epsg=25832, inplace=True)  # ← wichtig!
netz = netz.to_crs(epsg=4326)