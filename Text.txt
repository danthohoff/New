# pip install pandas geopandas shapely requests rtree pyproj

import os, io, re, requests
import pandas as pd
import geopandas as gpd
from shapely.geometry import Point

# --- Dateien / URLs ---
INPUT_CSV = "trassenfinder_verbindungen.csv"
OUTPUT_CSV = "betriebsstellen_mit_bundesland.csv"
BUNDESLAENDER_URL = (
    "https://raw.githubusercontent.com/isellsoap/deutschlandGeoJSON/master/2_bundeslaender/3_mittel.geojson"
)

# --- Parser für Koordinaten ---
LAT_RANGE = (45.0, 58.0)   # grob D + Umgebung
LON_RANGE = (3.0, 20.0)
_num_re = re.compile(r"[-+]?\d+(?:[.,]\d+)?")

def _is_lat(x): return LAT_RANGE[0] <= x <= LAT_RANGE[1]
def _is_lon(x): return LON_RANGE[0] <= x <= LON_RANGE[1]

def parse_latlon(val):
    """Akzeptiert: '52.52,13.405', 'POINT (13.405 52.52)', "('52.52','13.405')" etc."""
    if pd.isna(val):
        return None
    if isinstance(val, (tuple, list)) and len(val) == 2:
        try:
            a = float(str(val[0]).replace(",", "."))
            b = float(str(val[1]).replace(",", "."))
        except ValueError:
            return None
    else:
        s = str(val).strip().strip('"').strip("'")
        nums = _num_re.findall(s)
        if len(nums) < 2:
            return None
        a = float(nums[0].replace(",", "."))
        b = float(nums[1].replace(",", "."))
    # Reihenfolge prüfen
    if _is_lat(a) and _is_lon(b):
        lat, lon = a, b
    elif _is_lon(a) and _is_lat(b):
        lat, lon = b, a
    else:
        return None
    return (lat, lon)

# --- Bundesländer laden ---
def load_bundeslaender():
    try:
        laender = gpd.read_file(BUNDESLAENDER_URL)
    except Exception:
        r = requests.get(BUNDESLAENDER_URL, timeout=30); r.raise_for_status()
        laender = gpd.read_file(io.BytesIO(r.content))
    if laender.crs is None:
        laender.set_crs(epsg=4326, inplace=True)
    else:
        laender = laender.to_crs(epsg=4326)
    return laender

def pick_name_column(gdf):
    for c in ["GEN","NAME","name","NAME_1","Bundesland"]:
        if c in gdf.columns:
            return c
    for c in gdf.columns:
        if c != gdf.geometry.name:
            return c
    raise ValueError("Keine Namensspalte in Bundesländer-Daten gefunden.")

# --- Betriebsstellen-Liste aus CSV ---
def build_betriebsstellen(df):
    a = df[["von","von_latlon"]].rename(columns={"von":"betriebsstelle","von_latlon":"latlon"})
    b = df[["bis","bis_latlon"]].rename(columns={"bis":"betriebsstelle","bis_latlon":"latlon"})
    long_df = pd.concat([a,b], ignore_index=True)
    coords = long_df["latlon"].apply(parse_latlon)
    long_df["lat"] = coords.apply(lambda x: x[0] if x else None)
    long_df["lon"] = coords.apply(lambda x: x[1] if x else None)
    long_df = long_df.dropna(subset=["lat","lon"]).copy()
    long_df["betriebsstelle"] = long_df["betriebsstelle"].astype(str).str.strip()

    # Deduplizieren -> häufigste Koordinate nehmen
    def pick_coords(grp):
        vc = grp[["lat","lon"]].round(6).value_counts()
        if not vc.empty:
            lat, lon = vc.index[0]
            return pd.Series({"lat":lat,"lon":lon})
        return pd.Series({"lat":grp["lat"].mean(),"lon":grp["lon"].mean()})
    return long_df.groupby("betriebsstelle", as_index=False).apply(pick_coords).reset_index(drop=True)

# --- Zuordnung Bundesland ---
def assign_bundesland(bs, laender):
    name_col = pick_name_column(laender)
    points = gpd.GeoDataFrame(bs.copy(),
                              geometry=[Point(xy) for xy in zip(bs["lon"], bs["lat"])],
                              crs="EPSG:4326")
    joined = gpd.sjoin(points, laender[[name_col, laender.geometry.name]],
                       how="left", predicate="intersects")
    joined = joined.rename(columns={name_col:"bundesland"})
    # Fallback: nächstgelegenes Bundesland
    missing = joined["bundesland"].isna()
    if missing.any():
        laender_small = laender[[name_col, laender.geometry.name]]
        for i,row in joined[missing].iterrows():
            d = laender_small.distance(row.geometry)
            j = d.idxmin()
            joined.at[i,"bundesland"] = laender_small.at[j,name_col]
    return joined.drop(columns=["geometry"])[["betriebsstelle","lat","lon","bundesland"]]

# --- Main ---
def main():
    df = pd.read_csv(INPUT_CSV)
    bs = build_betriebsstellen(df)
    laender = load_bundeslaender()
    result = assign_bundesland(bs, laender)
    result.sort_values(["bundesland","betriebsstelle"], inplace=True, na_position="last")
    result.to_csv(OUTPUT_CSV, index=False, encoding="utf-8")
    print(f"Fertig: {len(result)} Betriebsstellen. Ergebnis in {OUTPUT_CSV}")

if __name__ == "__main__":
    main()