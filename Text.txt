import polars as pl
import matplotlib.pyplot as plt
import numpy as np

def plot_start_delay_histogram(
    df_zlm: pl.DataFrame,
    *,
    bin_size_sec: int = 30,
    max_delay_min: int = 30,
    show_stats: bool = True,
    figsize=(8,5)
):
    """
    Erstellt ein Histogramm der Startverspätungen (fsStatus == 2).
    
    Parameter:
    -----------
    df_zlm : pl.DataFrame
        Zuglaufmeldungen mit Spalten ['zn','fsStatus','vsp'] (vsp in Sekunden)
    bin_size_sec : int
        Breite der Histogrammbins in Sekunden (z.B. 30 = 30 Sekunden)
    max_delay_min : int
        Maximale Verspätung (in Minuten), bis zu der gebinnt wird (rechts wird abgeschnitten)
    show_stats : bool
        Wenn True, Median, MW, 95 %-Quantil im Plot zeigen
    figsize : tuple
        Größe des Plots
    """
    
    # --- 1️⃣ Startpunkte filtern ---
    df_start = df_zlm.filter(pl.col("fsStatus") == 2)

    # --- 2️⃣ Nur valide vsp-Werte ---
    df_start = df_start.filter(pl.col("vsp").is_not_null())

    # --- 3️⃣ Werte in numpy holen ---
    vsp_sec = df_start["vsp"].to_numpy()
    vsp_sec = vsp_sec[~np.isnan(vsp_sec)]

    # optional: Extremwerte kappen (z.B. nur ±30 min)
    max_delay_sec = max_delay_min * 60
    vsp_sec = vsp_sec[np.abs(vsp_sec) <= max_delay_sec]

    # --- 4️⃣ Histogrammbins definieren ---
    bins = np.arange(-max_delay_sec, max_delay_sec + bin_size_sec, bin_size_sec)

    # --- 5️⃣ Histogramm zeichnen ---
    plt.figure(figsize=figsize)
    n, edges, patches = plt.hist(vsp_sec, bins=bins, color="steelblue", alpha=0.8, edgecolor="white")

    plt.xlabel("Startverspätung [Sekunden]")
    plt.ylabel("Anzahl Züge")
    plt.title(f"Histogramm der Startverspätungen\n(bin size = {bin_size_sec}s, max ±{max_delay_min} min)")

    # --- 6️⃣ Zusatzstatistik ---
    if show_stats and len(vsp_sec) > 0:
        median = np.median(vsp_sec)
        mean = np.mean(vsp_sec)
        p95 = np.percentile(vsp_sec, 95)
        plt.axvline(median, color="red", linestyle="--", label=f"Median = {median:.0f}s")
        plt.axvline(mean, color="green", linestyle=":", label=f"Mean = {mean:.0f}s")
        plt.axvline(p95, color="orange", linestyle="--", label=f"95%-Quantil = {p95:.0f}s")
        plt.legend()

    plt.grid(alpha=0.3)
    plt.tight_layout()
    plt.show()

    return {
        "count": len(vsp_sec),
        "median_s": np.median(vsp_sec) if len(vsp_sec)>0 else np.nan,
        "mean_s": np.mean(vsp_sec) if len(vsp_sec)>0 else np.nan,
        "p95_s": np.percentile(vsp_sec, 95) if len(vsp_sec)>0 else np.nan
    }


# Beispiel:
stats = plot_start_delay_histogram(df_zlm, bin_size_sec=30, max_delay_min=30)
print(stats)


plt.hist(vsp_sec, bins=bins, density=True, color="steelblue", alpha=0.8)
plt.ylabel("relative Häufigkeit")